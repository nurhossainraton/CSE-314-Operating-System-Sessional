diff --git a/.vscode/settings.json b/.vscode/settings.json
new file mode 100644
index 0000000..d90bab9
--- /dev/null
+++ b/.vscode/settings.json
@@ -0,0 +1,6 @@
+{
+    "editor.fontSize": 22,
+    "files.associations": {
+        "param.h": "c"
+    }
+}
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 39a99d7..6978d95 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_dummyproc\
+	$U/_testprocinfo\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
@@ -153,7 +155,7 @@ QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \
 	then echo "-gdb tcp::$(GDBPORT)"; \
 	else echo "-s -p $(GDBPORT)"; fi)
 ifndef CPUS
-CPUS := 3
+CPUS := 1
 endif
 
 QEMUOPTS = -machine virt -bios none -kernel $K/kernel -m 128M -smp $(CPUS) -nographic
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..c097a27 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -8,6 +8,7 @@ struct spinlock;
 struct sleeplock;
 struct stat;
 struct superblock;
+struct pstat;
 
 // bio.c
 void            binit(void);
@@ -106,6 +107,10 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             settickets(int);
+int             getpinfo(uint64 pst);
+void            update_proc();
+void            shift_up();
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -141,6 +146,9 @@ int             fetchstr(uint64, char*, int);
 int             fetchaddr(uint64, uint64*);
 void            syscall();
 
+
+
+
 // trap.c
 extern uint     ticks;
 void            trapinit(void);
diff --git a/kernel/param.h b/kernel/param.h
index 6624bff..e0e7d17 100644
--- a/kernel/param.h
+++ b/kernel/param.h
@@ -11,3 +11,7 @@
 #define NBUF         (MAXOPBLOCKS*3)  // size of disk block cache
 #define FSSIZE       2000  // size of file system in blocks
 #define MAXPATH      128   // maximum file path name
+#define DEFAULT_TICKET_COUNT 10
+#define TIME_LIMIT_1 1
+#define TIME_LIMIT_2 2
+#define BOOST_INTERVAL 64
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..550626e 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -5,6 +5,9 @@
 #include "spinlock.h"
 #include "proc.h"
 #include "defs.h"
+#include "pstat.h"
+#include "random.c"
+
 
 struct cpu cpus[NCPU];
 
@@ -114,11 +117,15 @@ allocproc(void)
   for(p = proc; p < &proc[NPROC]; p++) {
     acquire(&p->lock);
     if(p->state == UNUSED) {
+     
       goto found;
     } else {
       release(&p->lock);
     }
   }
+  
+  
+
   return 0;
 
 found:
@@ -145,7 +152,11 @@ found:
   memset(&p->context, 0, sizeof(p->context));
   p->context.ra = (uint64)forkret;
   p->context.sp = p->kstack + PGSIZE;
-
+  
+   p->initialTickets = DEFAULT_TICKET_COUNT;
+  p->currentTickets = DEFAULT_TICKET_COUNT;
+  p->usedTickets = 0;
+  p->queue = 1;
   return p;
 }
 
@@ -321,6 +332,9 @@ fork(void)
   acquire(&np->lock);
   np->state = RUNNABLE;
   release(&np->lock);
+   
+  np->initialTickets = p->initialTickets;
+  np->currentTickets = p->currentTickets;
 
   return pid;
 }
@@ -434,6 +448,23 @@ wait(uint64 addr)
   }
 }
 
+int runnableTickets(void)
+{
+     struct proc *p;
+     int ticketCount =0;
+     for( p = proc;p<&proc[NPROC];p++)
+     {
+      acquire(&p->lock);
+      if(p->state == RUNNABLE)
+      {
+        ticketCount += p->currentTickets;
+
+      }
+      release(&p->lock);
+     }
+     return ticketCount;
+}
+
 // Per-CPU process scheduler.
 // Each CPU calls scheduler() after setting itself up.
 // Scheduler never returns.  It loops, doing:
@@ -447,27 +478,112 @@ scheduler(void)
   struct proc *p;
   struct cpu *c = mycpu();
   
+ 
+ 
   c->proc = 0;
+
   for(;;){
     // Avoid deadlock by ensuring that devices can interrupt.
     intr_on();
+    int totaltickets = 0;
+    if( runnableTickets() == 0)
+    {
+      for(p = proc;p<&proc[NPROC];p++)
+      {
+           acquire(&p->lock);
+           if(p->state == RUNNABLE){
+            p->currentTickets = p->initialTickets;
+
+           }
+          release(&p->lock);
+
+      }
+    }
+    totaltickets = runnableTickets();
+    if(totaltickets <= 0) goto rr;
 
+    int randomNum = randomrange(0,totaltickets);
+    int currtickets = 0;
     for(p = proc; p < &proc[NPROC]; p++) {
       acquire(&p->lock);
-      if(p->state == RUNNABLE) {
-        // Switch to chosen process.  It is the process's job
-        // to release its lock and then reacquire it
-        // before jumping back to us.
+      if(p->state == RUNNABLE && p->queue == 1) {
+        currtickets += p->currentTickets;
+        if(currtickets > randomNum)
+        {
+          release(&p->lock);
+          break;
+        }
+        
+        
+      }
+      release(&p->lock);
+      }
+      acquire(&p->lock);
+
+      int k = 0;
+      if(p->state == RUNNABLE && p->queue == 1)
+      {
+        k = 1;
+        p->currentTickets--;
+        p->remTime = TIME_LIMIT_1;
+
         p->state = RUNNING;
         c->proc = p;
         swtch(&c->context, &p->context);
-
-        // Process is done running for now.
-        // It should have changed its p->state before coming back.
         c->proc = 0;
+
+        if(p->remTime <= 0 && p->state == RUNNABLE)
+          p->queue = 2;
       }
       release(&p->lock);
+      if(k) continue;
+
+rr:
+      for(p = proc; p < &proc[NPROC]; p++) {
+        acquire(&p->lock);
+
+        if(p->state == RUNNABLE && p->queue == 2) {
+          p->remTime = TIME_LIMIT_2;
+
+          p->state = RUNNING;
+          c->proc = p;
+          swtch(&c->context, &p->context);
+          c->proc = 0;
+
+          if(p->remTime > 0 && p->state != RUNNABLE)
+            p->queue = 1;
+        }
+
+        release(&p->lock);
+        if(runnableTickets()) break;
+      }
     }
+    
+
+  
+}
+
+void
+update_proc() {
+  struct proc *p;
+  for(p = proc; p < &proc[NPROC]; p++) {
+    acquire(&p->lock);
+    if(p->state == RUNNING) {
+      p->usedTickets++;
+      p->remTime--;
+      if(p->remTime < 0) p->remTime = 0;
+    }
+    release(&p->lock);
+  }
+}
+
+void
+shift_up() {
+  struct proc *p;
+  for(p = proc; p < &proc[NPROC]; p++) {
+    acquire(&p->lock);
+    if(p->queue == 2) p->queue = 1;
+    release(&p->lock);
   }
 }
 
@@ -504,6 +620,10 @@ yield(void)
 {
   struct proc *p = myproc();
   acquire(&p->lock);
+  if(p->remTime > 0) {
+    release(&p->lock);
+    return;
+  }
   p->state = RUNNABLE;
   sched();
   release(&p->lock);
@@ -681,3 +801,51 @@ procdump(void)
     printf("\n");
   }
 }
+
+int settickets(int tickets)
+{
+  //printf("in setttickets");
+  if(tickets >= 1)
+  {
+      struct proc *p = myproc();
+      int pid = p->pid;
+      acquire(&p->lock);
+
+      for(p=proc;p< &proc[NPROC];p++)
+      {
+       
+        if(p->pid == pid)
+        {
+          p->initialTickets = tickets;
+          release(&p->lock);
+          return 0;
+        }
+      }
+      release(&p->lock);
+      return 0;
+  }
+  else
+      return -1;
+  
+}
+ int getpinfo(uint64 pst)
+ {
+   struct proc *p;
+   struct pstat temp;
+   //uint64 ps = &pst;
+   int i = 0;
+   for(p = proc; p < &proc[NPROC]; p++){
+   acquire(&p->lock);
+   temp.inuse[i] = p->state == UNUSED ? 0 : 1;
+   temp.pid[i] = p->pid;
+   temp.tickets_original[i] = p->initialTickets; 
+   temp.tickets_current[i] = p->currentTickets;
+   temp.time_slices[i] = p->usedTickets;
+   temp.inQ[i] = p->queue;
+   release(&p->lock);
+   i++;
+ }
+ return copyout(myproc()->pagetable, pst , (char*)&temp, sizeof(temp));
+}
+   
+ 
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..51f634f 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,10 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int initialTickets;
+  int currentTickets;
+  int usedTickets;
+  
+  int queue;
+  int remTime;
 };
diff --git a/kernel/pstat.h b/kernel/pstat.h
new file mode 100644
index 0000000..67101c6
--- /dev/null
+++ b/kernel/pstat.h
@@ -0,0 +1,14 @@
+#ifndef _PSTAT_H_
+#define _PSTAT_H_
+#include "param.h"
+
+struct pstat {
+  int pid[NPROC]; // the process ID of each process 
+  int inuse[NPROC]; // whether this slot of the process table is being used (1 or 0)
+  int inQ[NPROC]; // which queue the process is currently in 
+  int tickets_original[NPROC]; // the number of tickets each process originally had
+  int tickets_current[NPROC]; // the number of tickets each process currently has
+  int time_slices[NPROC]; // the number of time slices each process has been scheduled
+};
+
+#endif // _PSTAT_H_
diff --git a/kernel/random.c b/kernel/random.c
new file mode 100644
index 0000000..97bafb3
--- /dev/null
+++ b/kernel/random.c
@@ -0,0 +1,34 @@
+#include "types.h"
+
+// Return a integer between 0 and ((2^32 - 1) / 2), which is 2147483647.
+uint
+random(void)
+{
+  // Taken from http://stackoverflow.com/questions/1167253/implementation-of-rand
+  // Courtesy: https://github.com/joonlim/xv6/blob/master/random.c
+  static unsigned int z1 = 12345, z2 = 12345, z3 = 12345, z4 = 12345;
+  unsigned int b;
+  b  = ((z1 << 6) ^ z1) >> 13;
+  z1 = ((z1 & 4294967294U) << 18) ^ b;
+  b  = ((z2 << 2) ^ z2) >> 27; 
+  z2 = ((z2 & 4294967288U) << 2) ^ b;
+  b  = ((z3 << 13) ^ z3) >> 21;
+  z3 = ((z3 & 4294967280U) << 7) ^ b;
+  b  = ((z4 << 3) ^ z4) >> 12;
+  z4 = ((z4 & 4294967168U) << 13) ^ b;
+
+  return (z1 ^ z2 ^ z3 ^ z4) / 2;
+}
+
+// Return a random integer between a given range.
+int
+randomrange(int lo, int hi)
+{
+  if (hi < lo) {
+    int tmp = lo;
+    lo = hi;
+    hi = tmp;
+  }
+  int range = hi - lo + 1;
+  return random() % (range) + lo;
+}
\ No newline at end of file
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..cbfdb87 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_settickets(void);
+extern uint64 sys_getpinfo(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +128,8 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_settickets]   sys_settickets,
+[SYS_getpinfo]   sys_getpinfo,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..edc162b 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,5 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_settickets  22
+#define SYS_getpinfo  23
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..8dd2ae6 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,19 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_settickets(void)
+{
+  int a;
+  argint(0,&a);
+  return settickets(a);
+}
+uint64
+sys_getpinfo(void)
+{
+  uint64 a;
+  argaddr(0,&a);
+  return getpinfo(a);
+}
+
diff --git a/kernel/trap.c b/kernel/trap.c
index 512c850..e666ed0 100644
--- a/kernel/trap.c
+++ b/kernel/trap.c
@@ -165,6 +165,8 @@ clockintr()
 {
   acquire(&tickslock);
   ticks++;
+  update_proc();
+  if(ticks % BOOST_INTERVAL == 0) shift_up();
   wakeup(&ticks);
   release(&tickslock);
 }
diff --git a/user/dummyproc.c b/user/dummyproc.c
new file mode 100644
index 0000000..d122b30
--- /dev/null
+++ b/user/dummyproc.c
@@ -0,0 +1,40 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "user/user.h"
+#include "kernel/stat.h"
+
+int main(int argc, char const *argv[])
+{
+    if(argc != 2)
+    {
+        printf("Wrong input format");
+        return 0;
+    }
+    int tickets = atoi(argv[1]);
+    //printf("a");
+    if(settickets(tickets) != -1)
+    {
+       int childvalue = fork();
+      // printf("fork er por");
+       if(childvalue < 0)
+       {
+        //printf("Error in fork");
+        exit(1);
+       }
+       else
+       {
+         while(1)
+         {
+
+         }
+       }
+       exit(1);
+    }
+    else 
+    {
+         printf("Error in ticket setting");
+         exit(1);
+    }
+
+    return 0;
+}
diff --git a/user/testprocinfo.c b/user/testprocinfo.c
new file mode 100644
index 0000000..ef271b8
--- /dev/null
+++ b/user/testprocinfo.c
@@ -0,0 +1,18 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/pstat.h"
+#include "user/user.h"
+
+int main (int argc, char *argv[])
+{
+    printf("Printing process info \n");
+    printf("PID | In Use | inQ | Original Tickets | Current Tickets | Time Slices\n");
+    struct pstat pst;
+    getpinfo(&pst);    
+    for (int i = 0; i < NPROC; i++) {
+        if (pst.inuse[i]) {
+            printf("%d\t%d\t%d\t\t%d\t\t%d\t\t%d\n", pst.pid[i], pst.inuse[i],pst.inQ[i], pst.tickets_original[i], pst.tickets_current[i], pst.time_slices[i]);
+        }
+    }    
+    exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..b5ef267 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,5 @@
 struct stat;
+struct pstat;
 
 // system calls
 int fork(void);
@@ -22,6 +23,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int settickets(int);
+int getpinfo(struct pstat *);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..d2435c1 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("settickets");
+entry("getpinfo");
