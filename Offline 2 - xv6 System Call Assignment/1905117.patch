diff --git a/Makefile b/Makefile
index 39a99d7..fb8d5f3 100644
--- a/Makefile
+++ b/Makefile
@@ -132,6 +132,9 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_trace\
+	$U/_history\
+
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..acd2f0f 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -106,6 +106,8 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             trace(int);   
+
 
 // swtch.S
 void            swtch(struct context*, struct context*);
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..9beb1ff 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -321,7 +321,7 @@ fork(void)
   acquire(&np->lock);
   np->state = RUNNABLE;
   release(&np->lock);
-
+  np->traceId = p->traceId;
   return pid;
 }
 
@@ -681,3 +681,12 @@ procdump(void)
     printf("\n");
   }
 }
+
+int trace(int a)
+{
+    //printf("%d",a);
+    struct proc *p = myproc();
+    p->traceId = a;
+    return a;
+}
+
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..a67a251 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,11 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+  int traceId;
 };
+
+struct syscall_stat {
+    char syscall_name [16];
+    int count;
+    int accum_time;
+};
\ No newline at end of file
diff --git a/kernel/stat.h b/kernel/stat.h
index 19543af..f3084a4 100644
--- a/kernel/stat.h
+++ b/kernel/stat.h
@@ -9,3 +9,4 @@ struct stat {
   short nlink; // Number of links to file
   uint64 size; // Size of file in bytes
 };
+
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..b268d2d 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,8 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_trace(void);
+extern uint64 sys_history(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,8 +128,96 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_trace]   sys_trace,
+[SYS_history] sys_history,
+
+};
+
+struct syscall_stat sycallss[23] ={
+{"fork",0,0},{"exit",0,0},{"wait",0,0},{"pipe",0,0},{"read",0,0},{"kill",0,0},{"exec",0,0},{"fstat",0,0},{"chdir",0,0},{"dup",0,0},{"getpid",0,0},{"sbrk",0,0},{"sleep",0,0},{"uptime",0,0},{"open",0,0},{"write",0,0},{"mknod",0,0},{"unlink",0,0},{"link",0,0},{"mkdir",0,0},{"close",0,0 }, {"trace",0,0},{"history",0,0}
 };
 
+char *str[]={"fork","exit","wait","pipe","read","kill","exec","fstat","chdir","dup","getpid","sbrk","sleep","uptime","open","write","mknod","unlink","link","mkdir","close","trace"};
+
+
+void printarg(int num)
+{
+     if(num == SYS_read || num == SYS_write)
+    {
+      int a,b;
+      uint64 ip;
+      argint(0,&a);
+      argint(2,&b);
+      argaddr(1,&ip);
+      printf("args: (%d, %p, %d)",a,ip,b);
+    }
+    else if(num == SYS_wait || num == SYS_pipe)
+    {  
+      uint64 ip;
+      argaddr(0,&ip);
+      printf(" args: ( %p ) ",ip);
+    }
+    else if(num == SYS_close || num == SYS_kill || num == SYS_dup || num == SYS_sleep || num == SYS_trace || num== SYS_sbrk || num== SYS_exit)
+    {  
+      int i;
+      argint(0,&i);
+      printf(" args: ( %d ) ",i);
+    }
+    else if (num == SYS_chdir || num == SYS_mkdir || num == SYS_unlink)
+    {
+      char *ps=" ";
+      argstr(0,ps,MAXPATH);
+      printf(" args: ( %s )",ps);
+
+    }
+    else if(num == SYS_fstat)
+    {
+      int a;
+      uint64 ptr;
+      argint(0,&a);
+      argaddr(1,&ptr);
+      printf(" args: (%d, %p\n)",a,ptr);
+    }
+    else if(num == SYS_open)
+    {
+      int a;
+      char *ps="";
+      argint(1,&a);
+      argstr(0,ps,MAXPATH);
+
+      printf(" args: (%s, %d)",ps,a);
+    }
+
+    else if(num == SYS_mknod)
+    {
+      char *ps="";
+      int a,b;
+      argstr(0,ps,MAXPATH);
+      argint(1,&a);
+      argint(2,&b);
+      printf(" args: (%s, %d)",ps,a);
+    }
+
+    else if(num == SYS_exec)
+    {
+      char *ps="";
+      uint64 ptr;
+      argstr(0,ps,MAXPATH);
+      argaddr(1,&ptr);
+      printf(" args: (%s , %p) ",ps,ptr);
+      
+    }
+    else if( num == SYS_link)
+    {
+      char *p1="";
+      char *p2="";
+      argstr(0,p1,MAXPATH);
+      argstr(1,p2,MAXPATH);
+      printf(" args: (%s , %s) ",p1,p2);
+    }
+}
+struct spinlock lockvar;
+
 void
 syscall(void)
 {
@@ -135,13 +225,45 @@ syscall(void)
   struct proc *p = myproc();
 
   num = p->trapframe->a7;
+  
+
+  sycallss[num-1].count++;
+  uint xticks,yticks;
+
+  acquire(&lockvar);
+  xticks = ticks;
+  release(&lockvar);
   if(num > 0 && num < NELEM(syscalls) && syscalls[num]) {
     // Use num to lookup the system call function for num, call it,
     // and store its return value in p->trapframe->a0
+  if(num == p->traceId)
+  {
+    // printf("num is %d ",num);
+   
+    printf("pid: %d, syscall: %s",p->pid,str[num-1]);
+    printarg(num);
+  }
     p->trapframe->a0 = syscalls[num]();
+
+  acquire(&lockvar);
+  yticks = ticks;
+  release(&lockvar);
+
+  sycallss[num-1].accum_time = yticks - xticks;
+  
+  
+ 
+   
   } else {
     printf("%d %s: unknown sys call %d\n",
             p->pid, p->name, num);
     p->trapframe->a0 = -1;
   }
+
+     if(num == p->traceId)
+    {
+      printf(" return %d\n",p->trapframe->a0);
+    }
 }
+
+
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..3c0400a 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,6 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_trace  22
+#define SYS_history  23
+
diff --git a/kernel/sysfile.c b/kernel/sysfile.c
index 16b668c..03c2f05 100644
--- a/kernel/sysfile.c
+++ b/kernel/sysfile.c
@@ -138,13 +138,13 @@ sys_link(void)
   ilock(ip);
   if(ip->type == T_DIR){
     iunlockput(ip);
-    end_op();
+    end_op(); 
     return -1;
   }
 
   ip->nlink++;
   iupdate(ip);
-  iunlock(ip);
+  iunlock(ip); 
 
   if((dp = nameiparent(new, name)) == 0)
     goto bad;
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..b45b86c 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -12,7 +12,7 @@ sys_exit(void)
   int n;
   argint(0, &n);
   exit(n);
-  return 0;  // not reached
+  return 0; // not reached
 }
 
 uint64
@@ -43,7 +43,7 @@ sys_sbrk(void)
 
   argint(0, &n);
   addr = myproc()->sz;
-  if(growproc(n) < 0)
+  if (growproc(n) < 0)
     return -1;
   return addr;
 }
@@ -57,8 +57,10 @@ sys_sleep(void)
   argint(0, &n);
   acquire(&tickslock);
   ticks0 = ticks;
-  while(ticks - ticks0 < n){
-    if(killed(myproc())){
+  while (ticks - ticks0 < n)
+  {
+    if (killed(myproc()))
+    {
       release(&tickslock);
       return -1;
     }
@@ -89,3 +91,27 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+
+uint64
+sys_trace(void)
+{
+  int a;
+  argint(0, &a);
+  return trace(a);
+}
+
+extern struct syscall_stat sycallss[23];
+
+uint64
+sys_history(void)
+{
+  int a;
+  uint64 ptr;
+  struct proc *p = myproc();
+  argint(0, &a);
+  argaddr(1, &ptr);
+
+  if (copyout(p->pagetable, ptr, (char *)&sycallss[a-1], sizeof(sycallss[a-1])) < 0)
+    return -1;
+  return 0;
+}
diff --git a/user/history.c b/user/history.c
new file mode 100644
index 0000000..cb4558b
--- /dev/null
+++ b/user/history.c
@@ -0,0 +1,33 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+
+
+int
+main(int argc, char *argv[])
+{  
+  struct syscall_stat stat;
+  if(argc ==2 ){
+        history(atoi(argv[1]),&stat);
+        printf("%d: syscall: %s #: %d time : %d\n",atoi(argv[1]),stat.syscall_name,stat.count,stat.accum_time);
+  }
+
+  else if(argc==1)
+  {
+    for(int i=1;i<24;i++)
+    {
+        history(i,&stat);
+        printf("%d: syscall: %s #: %d time : %d\n",i,stat.syscall_name,stat.count,stat.accum_time);
+
+    }
+  }
+  return 0;
+  
+
+  
+  
+  
+  
+}
\ No newline at end of file
diff --git a/user/trace.c b/user/trace.c
new file mode 100644
index 0000000..923d7ed
--- /dev/null
+++ b/user/trace.c
@@ -0,0 +1,27 @@
+#include "kernel/param.h"
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+int
+main(int argc, char *argv[])
+{
+  int i;
+  char *nargv[MAXARG];
+
+  if(argc < 3 || (argv[1][0] < '0' || argv[1][0] > '9')){
+    fprintf(2, "Usage: %s sys_call_num command\n", argv[0]);
+    exit(1);
+  }
+
+  if (trace(atoi(argv[1])) < 0) {
+    fprintf(2, "%s: trace failed\n", argv[0]);
+    exit(1);
+  }
+  
+  for(i = 2; i < argc && i < MAXARG; i++){
+    nargv[i-2] = argv[i];
+  }
+  exec(nargv[0], nargv);
+  exit(0);
+}
\ No newline at end of file
diff --git a/user/user.h b/user/user.h
index 4d398d5..63ad480 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,4 +1,11 @@
 struct stat;
+struct syscall_stat {
+    char syscall_name [16];
+    int count;
+    int accum_time;
+};
+
+
 
 // system calls
 int fork(void);
@@ -22,6 +29,8 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int trace(int);
+int history(int,struct syscall_stat*);
 
 // ulib.c
 int stat(const char*, struct stat*);
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..e2095e4 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,5 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("trace");
+entry("history");
